snippet userc
use std::cell::RefCell;
use std::rc::Rc;
${0}
endsnippet

snippet usefs
use std::fs;
${0}
endsnippet

snippet def
Default::default()
endsnippet

snippet script
#!/usr/bin/env -S cargo eval --
// cargo-deps: log="0.4.0"
// vi: ft=rust

fn main() -> std::io::Result<()> {
    Ok(())
}
endsnippet

snippet ifls
if let Some($1) = $2 {
    $0
}
endsnippet

snippet msome
match $1 {
    None => {},
    Some(v) => {
    }
}
endsnippet

snippet dis
#[cfg(disable)]
endsnippet

snippet regex
lazy_static! {
    static ref RE: Regex = Regex::new("...").unwrap();
}
endsnippet

snippet lazystaticmutex
use std::sync::Mutex;

lazy_static::lazy_static! {
    static ref MUTEX: Mutex<$1> = Mutex::new($2);
}

fn example() {
    let locked = MUTEX.lock().unwrap();
    $3
}
endsnippet

snippet struct
struct $1 {
}

impl $1 {
    fn new() -> Self {
        Self {
	    $0
        }
    }
}
endsnippet

snippet global_mutex
lazy_static::lazy_static! {
    static ref GLOBAL: Arc<Mutex<$1>> = Arc::new(Mutex::new($2));
}
endsnippet

snippet fnew
fn new() -> Self {
    Self {
        $0
    }
}
endsnippet

snippet ifrom
impl From<$1> for $2 {
    fn from(v: $1) -> Self { $2::$3(v) }
}
endsnippet

snippet iter
impl Iterator for $1 {
    type Item = $2;

    fn next(&mut self) -> Option<Self::Item> {
	None
    }
}
endsnippet


snippet idebug
impl std::fmt::Debug for $1 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "$1 {{ }}")
    }
}
endsnippet

snippet filewrite
use std::io::{Write, BufWriter};
use std::fs::{File, OpenOptions};

let file = OpenOptions::new().write(true).truncate(true).open($1)?;
let mut file = BufWriter::new(file);
writeln!(&mut file, "{}", $2)?;
endsnippet

snippet fnms
fn $1(&mut self) {
    $0
}
endsnippet

snippet fns
fn $1(&self) {
    $0
}
endsnippet

snippet fne
fn $1(&self) -> Result<(), Error> {
    Ok(())
}
endsnippet

snippet dernum
#[derive(Debug, Copy, Clone, Hash, Eq, PartialEq, Ord, PartialOrd)]
$0
endsnippet

snippet fnS
fn $1(self) {
    $0
}
endsnippet

snippet display
use std::fmt;

impl fmt::Display for $1 {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "")
    }
}
endsnippet

snippet testmod "" m
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn main() {
        $0
    }
}
endsnippet

snippet unsimport
#![allow(unused_imports)]
endsnippet

snippet unused
#[allow(unused)] // TODO
endsnippet

snippet unimpl "" m
$0

unimplemented!();
endsnippet

snippet pan "" m
panic!();
$0
endsnippet

snippet alldead
#![allow(dead_code, unused_imports)] // REMOVE ME
endsnippet

snippet portablefn "" m
#[cfg(target_os = "linux")]
pub fn $1 {
    $0
}

#[cfg(any(target_os = "macos", target_os = "freebsd", target_os = "openbsd", target_os = "netbsd"))]
pub fn $1 {
}

#[cfg(target_os = "windows")]
pub fn $1 {
}
endsnippet

snippet hashmap_entry
use std::collections::hash_map;
let mut item = match $1.entry($2) {
    hash_map::Entry::Vacant(v) => v.insert($3),
    hash_map::Entry::Occupied(o) => o.into_mut(),
};
endsnippet

snippet btreemap_entry
use std::collections::btree_map;
let mut item = match $1.entry($2) {
    btree_map::Entry::Vacant(v) => v.insert($3),
    btree_map::Entry::Occupied(o) => o.into_mut(),
};
endsnippet

snippet ifletret
let $1 = if let $2($1) = self.$3 {
    $1
} else {
    return Ok(())
};
endsnippet

snippet thiserror
use thiserror::Error;

#[derive(Error, Debug)]
pub enum Error {
    #[error("Io error; {0}")]
    IoError(#[from] std::io::Error),
    #[error("Command error: {0}")]
    Command(String),
}

// thiserror = "1"
endsnippet

snippet adderror
#[error("$1 error; {0}")]
$1Error(#[from] $2::Error),
endsnippet

snippet thiserror_main
fn main() {
    match main_wrap() {
        Ok(()) => {},
        Err(e) => {
            eprintln!("{}", e);
            std::process::exit(-1);
        }
    }
}
endsnippet

snippet bigstructopt
extern crate structopt;
#[macro_use]
extern crate structopt_derive;

use structopt::StructOpt;
use structopt::clap::AppSettings;

#[derive(Debug, StructOpt)]
pub struct Server {
    #[structopt(name = "server_addr", short="s")]
    pub server_addr: Option<String>,

    #[structopt(name = "server_port", short="p", default_value="3232")]
    pub server_port: u16,
}

#[derive(Debug, StructOpt)]
pub struct Client {
    #[structopt(name = "server_addr")]
    pub server_addr: String,

    #[structopt(name = "server_port", short="p", default_value="3232")]
    pub server_port: u16,
}


#[derive(Debug, StructOpt)]
pub enum Command {
    #[structopt(name = "server")]
    Server(Server),

    #[structopt(name = "client")]
    Client(Client),
}

#[derive(StructOpt, Debug)]
#[structopt(raw(global_settings = "&[AppSettings::ColoredHelp, AppSettings::VersionlessSubcommands]"))]
pub struct Opt {
    #[structopt(subcommand)]
    command: Command,
}

fn main() -> Result<(), ()> {
    let opt = Opt::from_args();
    // Write me
}
endsnippet

snippet userpause
    {
        let mut s = String::new();
        use std::io::{stdin};
        let _ = stdin().read_line(&mut s);
    }
endsnippet

snippet lalrpop-cargo
[package]
build = "build.rs"

[build-dependencies]
lalrpop = "0.17.2"

[dependencies]
lalrpop-util = "0.18.1"
regex = "1"
endsnippet

snippet lalrpop-build
fn main() {
    lalrpop::process_root().unwrap();
}
endsnippet

snippet lalrpop-root
#![recursion_limit = "1024"]
#![allow(unused_parens)] // Until lalrpop is fixing the warning it generates

lalrpop_mod!(pub query);
endsnippet

snippet lalrpop-expr
use crate::expr::Expr;

grammar;

pub expr: Expr = {
    <e1:expr> "|" <e2:subexpr> => Expr::Or(Box::new(e1), Box::new(e2)),
    <e:subexpr> => e,
};

subexpr : Expr = {
    <e1:subexpr> "&" <e2:subexpr2> => Expr::And(Box::new(e1), Box::new(e2)),
    <e:subexpr2> => e,
};

subexpr2 : Expr = {
    "!" <e:subexpr3> => Expr::Not(Box::new(e)),
    <e:subexpr3> => e,
};

subexpr3 : Expr = {
    <e:lowexpr> => e,
};

lowexpr : Expr = {
    <s:r"%([^%]|%%)+%"> => Expr::Substring(s.to_owned()),
    "(" <e:expr> ")" => e,
}
endsnippet

snippet lalrpop-expr
#[derive(Debug)]
pub enum Expr {
    Substring(String),
    Not(Box<Expr>),
    And(Box<Expr>, Box<Expr>),
    Or(Box<Expr>, Box<Expr>),
}

impl Expr {
    pub fn parse(expr: &str) -> Result<Self, lalrpop_util::ParseError<usize, crate::parse::Token, &str>> {
        super::parse::exprParser::new().parse(expr)
    }
}
endsnippet

snippet sep

///////////////////////////////////////////////////////////////////////////////
// $0
//

endsnippet
